<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="1.85.2">
  <Settings>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Units" updates="None" val="use prefs" valType="str"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Window size (pixels)" updates="None" val="[1024, 768]" valType="code"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="OSF Project ID" updates="None" val="" valType="str"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Data filename" updates="None" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="expName" updates="None" val="loc_v1" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
  </Settings>
  <Routines>
    <Routine name="end">
      <TextComponent name="end_text">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="end_text" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="This was the end - Thank you!" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="end_key">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="end_key" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="key">
      <TextComponent name="text_3">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="Any text&amp;#10;&amp;#10;including line breaks" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="main_routine">
      <CodeComponent name="main_experiment_loop">
        <Param name="Begin Experiment" updates="constant" val="# this code block has 2 functions - (1) control time flow of the experimen, and (2) control visual elements/flashes&amp;#10;&amp;#10;import time&amp;#10;checkerboard_hidden=True&amp;#10;# for future reference: I need a struct (!) telling me what is 'inside' the visual stimulus - at all times!!&amp;#10;&amp;#10;# generated with a matlab script, so we can play around with other timing options&amp;#10;# stuff that happens left is always equally long as stuff that happens right - good for fMRI&amp;#10;# difference between 2 frequencies I cannot make exactly the same - so anything that compares frequencies should have NORMALIZED power&amp;#10;&amp;#10;&amp;#10;only_audio = [[10.,20.,'audio',['left','40']],[112.5,130.,'audio',['left','40']],[242.5,260.,'audio',['left','40']],[50.,60.,'audio',['left','55']],[195.,205.,'audio',['left','55']],[312.5,330.,'audio',['left','55']],[30.,40.,'audio',['right','40']],[147.5,165.,'audio',['right','40']],[277.5,295.,'audio',['right','40']],[77.5,95.,'audio',['right','55']],[175.,185.,'audio',['right','55']],[215.,225.,'audio',['right','55']]]&amp;#10;only_video = [[17.5,35.,'video',['left','8']],[135.,145.,'video',['left','8']],[280.,290.,'video',['left','8']],[87.5,105.,'video',['left','13']],[217.5,235.,'video',['left','13']],[320.,330.,'video',['left','13']],[52.5,70.,'video',['right','8']],[155.,165.,'video',['right','8']],[300.,310.,'video',['right','8']],[115.,125.,'video',['right','13']],[182.5,200.,'video',['right','13']],[252.5,270.,'video',['right','13']]]&amp;#10;&amp;#10;# this lasts for 5 minutes and 40 seconds in total (last 10 secs is REST)&amp;#10;all_stims = [[10.,20.,'audio',['left','40']],[112.5,130.,'audio',['left','40']],[242.5,260.,'audio',['left','40']],[50.,60.,'audio',['left','55']],[195.,205.,'audio',['left','55']],[312.5,330.,'audio',['left','55']],[30.,40.,'audio',['right','40']],[147.5,165.,'audio',['right','40']],[277.5,295.,'audio',['right','40']],[77.5,95.,'audio',['right','55']],[175.,185.,'audio',['right','55']],[215.,225.,'audio',['right','55']],[17.5,35.,'video',['left','8']],[135.,145.,'video',['left','8']],[280.,290.,'video',['left','8']],[87.5,105.,'video',['left','13']],[217.5,235.,'video',['left','13']],[320.,330.,'video',['left','13']],[52.5,70.,'video',['right','8']],[155.,165.,'video',['right','8']],[300.,310.,'video',['right','8']],[115.,125.,'video',['right','13']],[182.5,200.,'video',['right','13']],[252.5,270.,'video',['right','13']]]&amp;#10;all_timings = all_stims&amp;#10;max_time = 340.;&amp;#10;&amp;#10;&amp;#10;# right checkerboard stimuli&amp;#10;right_cb = visual.RadialStim(win, tex='sqrXsqr', color=1, size=2,&amp;#10;                             visibleWedge=[0., 181.], radialCycles=5,&amp;#10;                             angularCycles=10, interpolate=False, &amp;#10;                             angularPhase=2*3.141592/360/20,autoLog=False)&amp;#10;# right_cb_fl=right_cb&amp;#10;# right_cb_fl.setAngularPhase(90)&amp;#10;  &amp;#10;# left checkerboard stimuli&amp;#10;left_cb = visual.RadialStim(win, tex='sqrXsqr', color=1, size=2,&amp;#10;                            visibleWedge=[179.99, 360.], radialCycles=5,&amp;#10;                            angularCycles=10, interpolate=False,&amp;#10;                            angularPhase=2*3.141592/360/20,autoLog=False)&amp;#10;# left_cb_fl=left_cb&amp;#10;# left_cb_fl.setAngularPhase(90)&amp;#10;&amp;#10;  &amp;#10;# fixation dot&amp;#10;fixation = visual.PatchStim(win, color=-0.5, colorSpace='rgb', tex=None,&amp;#10;                            mask='circle', size=0.1)&amp;#10;&amp;#10;&amp;#10;vis_contents = [right_cb,left_cb,fixation,text_stim]&amp;#10;&amp;#10;&amp;#10;def doFlash(win,vis_contents,side):&amp;#10;&amp;#10;    # extract again the visual contents:&amp;#10;    right_cb = vis_contents[0]&amp;#10;    left_cb=vis_contents[1]&amp;#10;    fixation=vis_contents[2]&amp;#10;    text_stim=vis_contents[3]&amp;#10;&amp;#10;    if side=='left':&amp;#10;        left_cb.contrast = -1.*left_cb.contrast&amp;#10;    elif side=='right':&amp;#10;        right_cb.contrast = -1.*right_cb.contrast&amp;#10;    left_cb.draw()&amp;#10;    right_cb.draw()&amp;#10;    fixation.draw()&amp;#10;    text_stim.draw()&amp;#10;    win.flip()&amp;#10;&amp;#10;    time.sleep(0.005)&amp;#10;&amp;#10;    if side=='left':&amp;#10;        left_cb.contrast = -1.*left_cb.contrast&amp;#10;    elif side=='right':&amp;#10;        right_cb.contrast = -1.*right_cb.contrast&amp;#10;    left_cb.draw()&amp;#10;    right_cb.draw()&amp;#10;    fixation.draw()&amp;#10;    text_stim.draw()&amp;#10;    win.flip()&amp;#10;&amp;#10;# seems to be a good thing to name it like this.&amp;#10;def hideCheckerboard(win,vis_contents):&amp;#10;&amp;#10;    right_cb = vis_contents[0]&amp;#10;    left_cb=vis_contents[1]&amp;#10;    fixation=vis_contents[2]&amp;#10;    text_stim=vis_contents[3]&amp;#10;    fixation.draw()&amp;#10;    text_stim.draw()&amp;#10;    win.flip()&amp;#10;    new_vis_contents = [fixation,text_stim]&amp;#10;    return new_vis_contents&amp;#10;&amp;#10;def showCheckerboard(win,vis_contents):&amp;#10;&amp;#10;    right_cb = vis_contents[0]&amp;#10;    left_cb=vis_contents[1]&amp;#10;    fixation=vis_contents[2]&amp;#10;    text_stim=vis_contents[3]&amp;#10;    left_cb.draw()&amp;#10;    right_cb.draw()&amp;#10;    fixation.draw()&amp;#10;    text_stim.draw()&amp;#10;    new_vis_contents = [right_cb,left_cb,fixation,text_stim]&amp;#10;    return new_vis_contents&amp;#10;    &amp;#10;&amp;#10;def textFlip(win,vis_contents):&amp;#10;    # well - this could use some improvements - in conceptualization.&amp;#10;    # the checkerboard_hidden could be done better.&amp;#10;    # that's what you get when you are programming quick -n- dirty.&amp;#10;    for item in vis_contents:&amp;#10;        item.draw()&amp;#10;    win.flip()&amp;#10;" valType="extendedCode"/>
        <Param name="name" updates="None" val="main_experiment_loop" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="start_time=time.time()&amp;#10;&amp;#10;# to control for showing(or not(!)) the checkerboard, to it like this:&amp;#10;video_is_running = 0&amp;#10;video_was_running = 0&amp;#10;audio_is_running = 0&amp;#10;audio_was_running = 0&amp;#10;&amp;#10;&amp;#10;# draw (only) the fixation cross, now, using the function:&amp;#10;new_vis_contents=hideCheckerboard(win,vis_contents)&amp;#10;&amp;#10;# control how/when audio and visual elements are created:&amp;#10;v_next = 0&amp;#10;a_next = 0&amp;#10;&amp;#10;&amp;#10;# just start a separate thread - that contain letters, and which switches the letter - in memory - once per second&amp;#10;# one the letter is changed - set a 'changed' flag appropriately (i.e., that I can query)&amp;#10;# inside this loop - just query this thread - ask it if it changed - if it did, update the letter (&amp; 'flip' the window)&amp;#10;letter_switch_interval = 1.0 # seconds&amp;#10;letter_switch_probability = 0.15 # 15 % change of switching the 'wrong' way = subjects have to press.&amp;#10;# the letters list has been defined somewhere else (previously!)&amp;#10;lstream = letter_stream(letters_for_letter_stream,letter_switch_interval,letter_switch_probability)&amp;#10;lstream.start()&amp;#10;&amp;#10;&amp;#10;while True:&amp;#10;    current_time=time.time() - start_time&amp;#10;    tasks=[]&amp;#10;    for item in all_timings:&amp;#10;        if current_time &gt; item[0] and current_time &lt; item[1]:&amp;#10;            tasks.append([item[2], item[3]])&amp;#10;    &amp;#10;    # keep track of them over here (!) - so thay they are (properly!!!) reset!&amp;#10;    video_is_running = 0&amp;#10;    audio_is_running = 0&amp;#10;&amp;#10;&amp;#10;    for task in tasks:&amp;#10;    &amp;#10;        action = task[0]&amp;#10;        options = task[1]&amp;#10;    &amp;#10;        # set the is_now_running to: zero - so that at the end of this loop, the is_now_running == 1 whenever a checkerboard vis_stim is present.&amp;#10;&amp;#10;        if action=='video':&amp;#10;&amp;#10;           # only set this to 1 if there is a task - 'video' in the task stack.&amp;#10;            video_is_running = 1&amp;#10;&amp;#10;            # only set the checkerboard to true if it was off, first.&amp;#10;            if not video_was_running:&amp;#10;                print(' -- ENABLE CHECKERBOARD')&amp;#10;                new_vis_contents = showCheckerboard(win,vis_contents)&amp;#10;&amp;#10;&amp;#10;            # only create the v_next, if its value is not the (int) 0 value - so do THIS at first iteration of the block.&amp;#10;            # so - at the start; make an thread - and start it - and make a new thread just after that, just in case&amp;#10;            if v_next==0:&amp;#10;                v_current = play_vis_stim(vis_times,options[0],options[1])&amp;#10;                v_current.start()&amp;#10;                v_next = play_vis_stim(vis_times,options[0],options[1])&amp;#10;            else:&amp;#10;                # when NOT at the start - cycle to the next one - start it - prepare the new one already.&amp;#10;                # only start up the visual new thread once the current one is done (IF the task has a video element in it)&amp;#10;                if not v_current.isAlive():     &amp;#10;                    v_current=v_next&amp;#10;                    v_current.start()&amp;#10;                    v_next = play_vis_stim(vis_times,options[0],options[1])&amp;#10;&amp;#10;&amp;#10;        # handle the 'audio:&amp;#10;        if action=='audio':&amp;#10;&amp;#10;            # mark audio is running(now)&amp;#10;            audio_is_running = 1&amp;#10;&amp;#10;&amp;#10;            # same handling for audio.&amp;#10;            if a_next==0:&amp;#10;                a_current=play_audio_stim(sounds,options[0],options[1])&amp;#10;                a_current.start()&amp;#10;                a_next=play_audio_stim(sounds,options[0],options[1])&amp;#10;            else:&amp;#10;                if not a_current.isAlive():                &amp;#10;                    a_current = a_next&amp;#10;                    a_current.start()&amp;#10;                    a_next=play_audio_stim(sounds,options[0],options[1])&amp;#10;                    &amp;#10;&amp;#10;&amp;#10;    # break the main loop if time is over:&amp;#10;    if current_time &gt; max_time:&amp;#10;        # a graceful exit for the thread which normally wouldn't end...&amp;#10;        lstream.setStop()&amp;#10;        break&amp;#10;&amp;#10;&amp;#10;&amp;#10;    # do the check here for either showing, or hiding, the checkerboards. Probably I can also ask for which elements are in the current visual stimulus.&amp;#10;    # need pygame manual for that...&amp;#10;    if video_was_running and not video_is_running:&amp;#10;        print(' -- DISABLE CHECKERBOARD')&amp;#10;        new_vis_contents = hideCheckerboard(win,vis_contents)&amp;#10;&amp;#10;    &amp;#10;    # reset the video and/or audio stimuli:&amp;#10;    if not video_is_running:&amp;#10;        v_next = 0&amp;#10;    if not audio_is_running:&amp;#10;        a_next = 0&amp;#10;&amp;#10;&amp;#10;    # check if the visual thread is running, if so:&amp;#10;    # sort of assumes that there are checkerboard!&amp;#10;    if video_is_running:&amp;#10;        if v_current.queryFlash():&amp;#10;            # do the flash&amp;#10;            side = v_current.getSide()&amp;#10;            doFlash(win,vis_contents,side)&amp;#10;&amp;#10;            # reset the flash value - and continue:&amp;#10;            v_current.resetFlash()&amp;#10;&amp;#10;&amp;#10;   # to keep track, do it like this:&amp;#10;    video_was_running = video_is_running&amp;#10;    audio_was_running = audio_is_running&amp;#10;&amp;#10;    time.sleep(0.0005) # be kind to the computer - we won't need crazy timing accuracy - just accurate markers.&amp;#10;&amp;#10;&amp;#10;&amp;#10;    # resolve letter stream.&amp;#10;    if lstream.queryFlag():&amp;#10;        letter = lstream.getLetter()&amp;#10;        text_stim.text=letter&amp;#10;        text_stim.text=text_stim.text # according to suggestion??&amp;#10;        textFlip(win,new_vis_contents)&amp;#10;        &amp;#10;&amp;#10;    # ADD-ON which only works in psychopy?&amp;#10;    # enable key break...&amp;#10;    # do the key&amp;#10;    if event.getKeys(keyList=[&quot;escape&quot;]):&amp;#10;        lstream.setStop()&amp;#10;        core.quit()&amp;#10;        continueRoutine=False&amp;#10;&amp;#10;#    key = event.getKeys() # \also check for a keyboard trigger (any key) &amp;#10;#    if len(key) &gt; 0:&amp;#10;#       if not key == ['space']:&amp;#10;#          pass&amp;#10;#     else:&amp;#10;#         if key == ['escape']: core.quit() #  escape allows us to exit&amp;#10;#        continueRoutine = False&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="instr">
      <TextComponent name="instr_text">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="instr_text" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="Keep focusing on the centre of the screen&amp;#10;&amp;#10;The letters M or W will appear&amp;#10;&amp;#10;-Press 'm' if you see the letter M&amp;#10;-Press 'w' if you see the letter W&amp;#10;&amp;#10;Respond as quickly as possible&amp;#10;&amp;#10;press space bar to begin" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_begin">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_begin" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="audio_55_L">
      <SoundComponent name="sound_3">
        <Param name="sound" updates="constant" val="audio_55Hz_L.wav" valType="str"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="sound_3" valType="code"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="durationEstim" updates="None" val="1.2" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
      </SoundComponent>
    </Routine>
    <Routine name="play_audio">
      <SoundComponent name="sound_1">
        <Param name="sound" updates="constant" val="audio_40Hz_L.wav" valType="str"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="sound_1" valType="code"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="1.0" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
      </SoundComponent>
    </Routine>
    <Routine name="do_audio">
      <CodeComponent name="audio_stim">
        <Param name="Begin Experiment" updates="constant" val="import threading&amp;#10;import time&amp;#10;&amp;#10;&amp;#10;# define my dict.&amp;#10;sounds={'left':{'40':sound.Sound('stim/audio_40Hz_L.wav', secs=-1),'55':sound.Sound('stim/audio_55Hz_L.wav', secs=-1)},'right':{'40':sound.Sound('stim/audio_40Hz_R.wav', secs=-1),'55':sound.Sound('stim/audio_55Hz_R.wav', secs=-1)}}&amp;#10;&amp;#10;# initiate my volumes...&amp;#10;sounds['left']['40'].setVolume(1)&amp;#10;sounds['right']['40'].setVolume(1)&amp;#10;sounds['left']['55'].setVolume(1)&amp;#10;sounds['right']['55'].setVolume(1)&amp;#10;&amp;#10;&amp;#10;class play_audio_stim(threading.Thread):&amp;#10;    def __init__(self,sounds,side,freq):&amp;#10;        threading.Thread.__init__(self)&amp;#10;        self.side=side&amp;#10;        self.freq=freq&amp;#10;        self.sounds=sounds&amp;#10;        self.isstarted=0&amp;#10;    def run(self):&amp;#10;        print('started audio thread...')&amp;#10;        self.isstarted=1&amp;#10;        start_time=time.time()&amp;#10;        sounds=self.sounds&amp;#10;        freq=self.freq&amp;#10;        side=self.side&amp;#10;&amp;#10;        # current_time = time.time() - start_time&amp;#10;        # print current_time&amp;#10;        my_sound = sounds[side][freq]&amp;#10;        my_sound.play()&amp;#10;        # ... aaand... we neatly wait untill the sound has been finished!&amp;#10;        time.sleep(my_sound.getDuration())&amp;#10;        current_time = time.time() - start_time&amp;#10;        print '---'&amp;#10;        print current_time&amp;#10;&amp;#10;        &amp;#10;    def isStarted(self):&amp;#10;        return self.isstarted" valType="extendedCode"/>
        <Param name="name" updates="None" val="audio_stim" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="# a = play_audio_stim(sounds,'right',55)&amp;#10;# a.start()&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_2"/>
    <Routine name="audio_40_R">
      <SoundComponent name="sound_2">
        <Param name="sound" updates="constant" val="audio_40Hz_R.wav" valType="str"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="sound_2" valType="code"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="1.0" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
      </SoundComponent>
    </Routine>
    <Routine name="key_4">
      <TextComponent name="text_5">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="Any text&amp;#10;&amp;#10;including line breaks" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="audio_55_R">
      <SoundComponent name="sound_4">
        <Param name="sound" updates="constant" val="audio_55Hz_R.wav" valType="str"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="sound_4" valType="code"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="durationEstim" updates="None" val="1.2" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
      </SoundComponent>
    </Routine>
    <Routine name="vis_8Hz_L_2"/>
    <Routine name="beide">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="p1=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'left')&amp;#10;p1.run()&amp;#10;a = play_audio_stim(sounds,'right',55)&amp;#10;a.start()&amp;#10;p2=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'right')&amp;#10;p2.run()&amp;#10;&amp;#10;#p3=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'left')&amp;#10;#p3.start()&amp;#10;#p4=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'right')&amp;#10;#p4.start()&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="key_3">
      <TextComponent name="instructions">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="instructions" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="Try to keep focusing on the crosshair!" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="key_2"/>
    <Routine name="do_letters">
      <CodeComponent name="letter_stim">
        <Param name="Begin Experiment" updates="constant" val="text_stim = visual.TextStim(win=win, ori=0, name='text_4',&amp;#10;    text='X',    font=u'Arial',&amp;#10;    pos=[0, 0], height=0.1, wrapWidth=None,&amp;#10;    color=u'white', colorSpace='rgb', opacity=1,&amp;#10;    depth=0.0)&amp;#10;&amp;#10;&amp;#10;# quick and dirty shift function. Matlab has got its own built-in 'circshift' - I need to do it like this, now.&amp;#10;import random # if I didn't , already! - or if psychopy didn't , already.&amp;#10;def shift(seq, n):&amp;#10;    n = n % len(seq)&amp;#10;    return seq[n:] + seq[:n]&amp;#10;&amp;#10;# doesn't matter if it's a set or if it's a list, for our purposes&amp;#10;# list comprehension uppercase trick:&amp;#10;letters_for_letter_stream = ['m','w','w','m']&amp;#10;letters_for_letter_stream = [x.upper() for x in letters_for_letter_stream]&amp;#10;&amp;#10;&amp;#10;# the letter_stream could be done better and made more general. Now it's too focussed on 'letters', but it should be really focussed on 'characters' or 'strings', or whatever kind of elements may be.&amp;#10;# the only thing is - in psychopy, it's not that easy to search-and-replace. In matlab it would've been quicker (for now). Program it in Spyder.. seems to be interesting!&amp;#10;&amp;#10;class letter_stream(threading.Thread):&amp;#10;    def __init__(self,letters,switch_frequency,switch_probability):&amp;#10;        threading.Thread.__init__(self)&amp;#10;&amp;#10;        self.letters=letters&amp;#10;        self.flag = 0&amp;#10;        self.switch_frequency=switch_frequency&amp;#10;        self.switch_probability = switch_probability&amp;#10;        self.isstarted=0&amp;#10;        self.current_letter='X'&amp;#10;        self.stop = 0&amp;#10;        self.pause=1&amp;#10;&amp;#10;&amp;#10;    def run(self):&amp;#10;        print('started letter thread...')&amp;#10;        self.isstarted=1&amp;#10;        start_time=time.time()&amp;#10;&amp;#10;        letters=self.letters&amp;#10;        switch_frequency=self.switch_frequency&amp;#10;        switch_probability=self.switch_probability&amp;#10;&amp;#10;&amp;#10;        cal_time = time.time()&amp;#10;        # keep on doing this - until the end of the experiment, when I 'quit' the CORE:&amp;#10;        while True:&amp;#10;&amp;#10;            # if the time bigger than the 'cal' time:&amp;#10;            if time.time() - cal_time &gt; 0:&amp;#10;                # effecively, only run this code-block once every letter_time_interval:&amp;#10;                cal_time = cal_time + switch_frequency&amp;#10;                # switch the letter - according to the given chance:&amp;#10;                if random.random() &lt; switch_probability:&amp;#10;                    letters = shift(letters,-1)&amp;#10;                else:&amp;#10;                    letters = shift(letters,1)&amp;#10;                # set the 'current' letter.&amp;#10;                self.current_letter = letters[0]&amp;#10;                # set the flag, too.&amp;#10;                self.flag = 1&amp;#10;            &amp;#10;                if self.pause==0:&amp;#10;                    self.current_letter = letters[0]&amp;#10;                    self.pause=1&amp;#10;                elif self.pause==1:&amp;#10;                    self.current_letter = (' ')&amp;#10;                    self.pause = 0 &amp;#10;            &amp;#10;            # sleep - for only a short time.&amp;#10;            time.sleep(0.01)&amp;#10;    &amp;#10;            if self.stop:&amp;#10;                break&amp;#10;&amp;#10;&amp;#10;&amp;#10;    def getLetter(self):&amp;#10;        return self.current_letter&amp;#10;&amp;#10;    def isStarted(self):&amp;#10;        return self.isstarted&amp;#10;&amp;#10;    def queryFlag(self):&amp;#10;        if self.flag==1:&amp;#10;            self.flag = 0&amp;#10;            return 1&amp;#10;        else:&amp;#10;            return 0&amp;#10;&amp;#10;    def setStop(self):&amp;#10;        self.stop=1&amp;#10;" valType="extendedCode"/>
        <Param name="name" updates="None" val="letter_stim" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="vis_8Hz_L"/>
    <Routine name="do_triggers">
      <CodeComponent name="code_triggers">
        <Param name="Begin Experiment" updates="constant" val="# -*- coding: utf-8 -*-&amp;#10;&quot;&quot;&quot;&amp;#10;Created on Wed May 27 12:57:03 2015&amp;#10;&amp;#10;@author: Johan&amp;#10;&quot;&quot;&quot;&amp;#10;# this is all I need to make my experiment output some triggers.&amp;#10;# USAGE (very simple):&amp;#10;&amp;#10;# check the sender objects - use the one appropriate!&amp;#10;# then - instantiate an ev_thread - give as agurment an instantiation of the appropriate sender object.&amp;#10;&amp;#10;#   evt = evt_thread(egi_sender())&amp;#10;&amp;#10;# then  start it:&amp;#10;&amp;#10;#   evt.start()&amp;#10;&amp;#10;# then - send events like so (i.e., strings!)&amp;#10;# brain products DOES wish only for INTs, though. That sort of sucks, given that EGI accepts strings. Naja. Implement it anyway.&amp;#10;&amp;#10;#   evt.send(10)&amp;#10;&amp;#10;# finally, at the end of the experiment  - stop it&amp;#10;&amp;#10;#   evt.stop()&amp;#10;&amp;#10;&amp;#10;# a class that sends events regardless of attached device. So that during my experiment, I don't&amp;#10;# have to worry aobut that - the abstraction lies in here.&amp;#10;&amp;#10;# written on-the-fly. So abstractions are right now something to improve upon.&amp;#10;# like: where do I do my device-specific stuff, do I make own functions for them, and where?&amp;#10;# right now I opted to have it distributed into the class itself, while in prinicple,&amp;#10;# it's nicer to maybe even make sub-classes per device for easy implementation later on.&amp;#10;# hmm - maybe I shoudl do this anyway. Damn.&amp;#10;&amp;#10;# let's see how much the quick-n-dirty class implementation method of work would be&amp;#10;# improved by using python and NOT matlab - the king of quick n dirty.&amp;#10;&amp;#10;&amp;#10;# stuff we beed to send stuff:&amp;#10;import egi.simple as egi&amp;#10;# import parallel&amp;#10;import threading&amp;#10;&amp;#10;import time&amp;#10;&amp;#10;# fill in later to allow me to send BP triggers via parallel.&amp;#10;# most easy now - i just need to take care to instantiate the right object.&amp;#10;# and THEN - I just use init, send and finish!!&amp;#10;# maybe I could even make a super-class of this.&amp;#10;# but not.. now..&amp;#10;class brain_products_sender():&amp;#10;    def __init__(self):&amp;#10;        pass&amp;#10;    &amp;#10;    def init(self):&amp;#10;        pass&amp;#10;    &amp;#10;    def send(self,ev):&amp;#10;        pass&amp;#10;    &amp;#10;    def finish(self):&amp;#10;        pass&amp;#10;    &amp;#10;&amp;#10;# this looks a little bit cleaner, already - i can focus just on one class if i wish&amp;#10;# to implement another recorder.&amp;#10;class egi_sender():&amp;#10;    def __init__(self):&amp;#10;        pass&amp;#10;        &amp;#10;    def init(self):&amp;#10;        ns = egi.Netstation()&amp;#10;        ns.connect('10.0.0.42', 55513) # sample address and port -- change according to your network settings            &amp;#10;        ns.BeginSession()     &amp;#10;        ns.sync()     &amp;#10;        ns.StartRecording()&amp;#10;        # save it to obj namespace for later use.&amp;#10;        self.ns=ns&amp;#10;        &amp;#10;    def send(self,ev):&amp;#10;        ns = self.ns&amp;#10;        timestamp = egi.ms_localtime()&amp;#10;        ns.send_event( ev, label=ev, timestamp=timestamp, table = {'label' : ev, 'timestamp' : timestamp} ) &amp;#10;        &amp;#10;    def finish(self):&amp;#10;        ns = self.ns&amp;#10;        ns.StopRecording()&amp;#10;        ns.EndSession()&amp;#10;        ns.disconnect()&amp;#10;&amp;#10;&amp;#10;# the MAIN class: ev_sender!&amp;#10;class ev_thread(threading.Thread):&amp;#10;    &amp;#10;    # init asks you for what kind of device you have attached&amp;#10;    # it also inits for you - if needed&amp;#10;    def __init__(self,sender_obj):&amp;#10;        # overload..&amp;#10;        threading.Thread.__init(self)&amp;#10;        # output_device can be either:&amp;#10;        # 'no_device'&amp;#10;        # 'egi'&amp;#10;        # 'brain_products'&amp;#10;        # !!! instantiate THIS object with a sender object!&amp;#10;        self.sender = sender_obj&amp;#10;        self.ev_list=[]&amp;#10;        # for clean exit&amp;#10;        self.stop_sending = 0&amp;#10;        # do the init stuff separately (necessary) - makes you work for it&amp;#10;        self.sender.init()&amp;#10;&amp;#10;        &amp;#10;    def run(self):&amp;#10;&amp;#10;        # apply the LIFO rule for sending events.&amp;#10;        while len(self.ev_list)&gt;0:&amp;#10;&amp;#10;            # pop it..&amp;#10;            ev=self.ev_list.pop(0)&amp;#10;&amp;#10;            # send it!&amp;#10;            self.sender.send(ev)&amp;#10;            &amp;#10;            # arrange for a clean exit&amp;#10;            if self.stop_thread == 1:&amp;#10;                # disconnect, etc etc:&amp;#10;                self.sender.stop()&amp;#10;                # then - exit this loop.&amp;#10;                break&amp;#10;            &amp;#10;            # make sure the processor doens't take it all up!&amp;#10;            # allow for 1 msec time inaccuracy, too.&amp;#10;            time.sleep(0.001)&amp;#10;&amp;#10;    def send(self,ev):&amp;#10;        # just append it to the list - so it'll be taken off in the main while loop.&amp;#10;        self.ev.append(ev)&amp;#10;        &amp;#10;        &amp;#10;    def stop(self):&amp;#10;        self.stop_thread = 1&amp;#10;        " valType="extendedCode"/>
        <Param name="name" updates="None" val="code_triggers" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
      <TextComponent name="select_eeg_system">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="select_eeg_system" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="What is your EEG system?&amp;#10;&amp;#10;1) Nothing (don't send triggers)&amp;#10;&amp;#10;2) EGI&amp;#10;&amp;#10;3) Brain Products" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="eeg_resp">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="eeg_resp" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'1','2','3','space','esc'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="get_eeg_system">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="get_eeg_system" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;# VERY exhaustive - can i do this better?&amp;#10;my_key_pressed = eeg_resp.keys&amp;#10;eeg_systems = {'1':'none', '2':'egi', '3':'bp'} # of course it is a comma - like everything in pyhton&amp;#10;eeg_system_used = eeg_systems[my_key_pressed]&amp;#10;&amp;#10;print eeg_system_used" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="do_video">
      <CodeComponent name="vis_stim">
        <Param name="Begin Experiment" updates="constant" val="import time&amp;#10;import threading&amp;#10;import copy&amp;#10;&amp;#10;&amp;#10;&amp;#10;# initiate my visual stimuli:&amp;#10;vis_times={'8':[0.001,0.111, 0.253,0.373,0.475, 0.600],'13':[0.001,0.078,0.151,0.214,0.300,0.376,0.442,0.525,0.600]}&amp;#10;&amp;#10;&amp;#10;class play_vis_stim(threading.Thread):&amp;#10;    def __init__(self,vis_times,side,freq):&amp;#10;        threading.Thread.__init__(self)&amp;#10;        self.win=win&amp;#10;        # is this it?&amp;#10;        self.hit_times=copy.deepcopy(vis_times[freq])&amp;#10;        self.side=side&amp;#10;        self.flash=0&amp;#10;        self.isstarted=0&amp;#10;&amp;#10;&amp;#10;    def run(self):&amp;#10;&amp;#10;        print('started visual thread...')&amp;#10;        self.isstarted=1&amp;#10;        # get the list&amp;#10;        hit_times = self.hit_times&amp;#10;        # this is to make things run/work&amp;#10;        max_time = hit_times[-1]&amp;#10;        hit_times[-1] = -1&amp;#10;&amp;#10;        start_time=time.time()&amp;#10;        target_time = hit_times.pop(0)&amp;#10;&amp;#10;        while True:&amp;#10;            current_time = time.time() - start_time&amp;#10;            if current_time &gt;target_time and target_time &gt; 0:&amp;#10;    &amp;#10;                #print current_time&amp;#10;                #print target_time&amp;#10;                #print 'flashed'&amp;#10;&amp;#10;                self.flash=1;&amp;#10;&amp;#10;                # get us a NEW target time !!&amp;#10;                target_time = hit_times.pop(0)&amp;#10;&amp;#10;            if current_time&gt;max_time:&amp;#10;                #print 'broke while loop at time = %f ' % current_time&amp;#10;                break&amp;#10;    &amp;#10;            time.sleep(0.0005)&amp;#10;&amp;#10;    def resetFlash(self):&amp;#10;        self.flash=0&amp;#10;&amp;#10;    def queryFlash(self):&amp;#10;        return self.flash&amp;#10;&amp;#10;    def getSide(self):&amp;#10;        return self.side&amp;#10;&amp;#10;    def isStarted(self):&amp;#10;        return self.isstarted" valType="extendedCode"/>
        <Param name="name" updates="None" val="vis_stim" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="#for i in range(0,100):&amp;#10; #   if i==0:&amp;#10;  #      p1=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'left')&amp;#10;   #     p1.run()&amp;#10;    #time.sleep(0.1)&amp;#10;&amp;#10;#p2=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'right')&amp;#10;#p2.start()&amp;#10;&amp;#10;#p3=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'left')&amp;#10;#p3.start()&amp;#10;#p4=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'right')&amp;#10;#p4.start()&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="text">
      <TextComponent name="text_2">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="text" updates="constant" val="Any text&amp;#10;&amp;#10;including line breaks" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="do_video"/>
    <Routine name="do_audio"/>
    <Routine name="do_letters"/>
    <Routine name="do_triggers"/>
    <Routine name="instr"/>
    <Routine name="main_routine"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
